module frege.data.conduit.internal.StringCodec where

import frege.data.ByteString as BS (ByteString)
import frege.data.Conduit (ConduitT, await, leftover, yield)
import frege.data.List (find)
import frege.data.Monoid (mappend)

data Charset = pure native java.nio.charset.Charset

pure native utf8 java.nio.charset.StandardCharsets.UTF_8 :: Charset

native getBytes :: String -> Charset -> STMutable s (JArray Byte)
pure native newString new :: JArray Byte -> Int -> Int -> Charset -> String

encodeUtf8 :: String -> ByteString
encodeUtf8 s = ST.run (BS.unsafeFreeze =<< getBytes s utf8)

{--
   Beware of cutoff; if the ByteString ends with an incomplete byte sequence,
   the last character in the result String becomes U+FFFD (the replacement character).
 -}
decodeUtf8 :: ByteString -> String
decodeUtf8 (ByteString{payload, offset, length}) =
    newString payload offset length utf8

decodeUtf8Streaming :: Monad m => ConduitT ByteString String m ()
decodeUtf8Streaming =
    loop
  where
    loop = do
        mbs <- await
        case mbs of
          Nothing -> pure ()
          Just bs -> do
            let s = decodeUtf8 bs
            -- String.new replaces trailing invalid byte(s) to a U+FFFD (the replacement character).
            -- if the last char is U+FFFD, the next chunk of ByteString is fetched to prepend it to
            -- form a (hopefully) valid UTF-8 sequence.
            if s.isEmpty
            then yield s
            else if s.charAt (s.length - 1) /= '\ufffd'
                 then yield s
                 else do
                     let (mdecoded, fragment) = decodeAnd bs s
                     maybe (pure ()) yield mdecoded
                     mbs2 <- await
                     case mbs2 of
                       Just bs2 -> leftover (fragment `mappend` bs2)
                       -- no more chunk means the input is invalid
                       Nothing  -> yield "\ufffd"
            loop
    -- splits a bytestring into two which the former should be decoded into a valid String
    -- and the latter should be concatenated to the next ByteString chunk to form another.
    decodeAnd :: ByteString -> String -> (Maybe String, ByteString)
    decodeAnd bs s =
        let validLen = find
              (\len ->
              let news = decodeUtf8 $ BS.take len bs
              in news.length < s.length
              )
              [BS.length bs - 1, (BS.length bs - 2)..0]
        in
        case validLen of
          Just len -> (Just $ decodeUtf8 $ BS.take len bs, BS.drop len bs)
          Nothing  -> (Nothing, bs)
