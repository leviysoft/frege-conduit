module frege.data.conduit.internal.Pipe where

import frege.control.monad.trans.MonadIO (MonadIO)
import frege.control.monad.trans.MonadTrans (MonadTrans)
import frege.control.monad.trans.Resource (MonadResource)
import frege.data.Void (Void, absurd)

data Pipe l i o u (m :: * -> *) r =
    {-- Provide new output to be sent downstream. This constructor has two
      - fields: the next @Pipe@ to be used and the output value.
      -}
    HaveOutput (Pipe l i o u m r) o
  | {-- Request more input from upstream. The first field takes a new input
      - value and provides a new @Pipe@. The second takes an upstream result
      - value, which indicates that upstream is producing no more results.
      -}
    NeedInput (i -> Pipe l i o u m r) (u -> Pipe l i o u m r)
  | --- Processing with this @Pipe@ is complete, providing the final result.
    Done r
  | --- Require running of a monadic action to get the next @Pipe@.
    PipeM (m (Pipe l i o u m r))
  | --- Return leftover input, which should be provided to future operations.
    Leftover (Pipe l i o u m r) l

instance Monad m => Monad (Pipe l i o u m) where
    pure = Done

    HaveOutput p o  >>= fp = HaveOutput (p >>= fp)            o
    NeedInput p c   >>= fp = NeedInput  (p >=> fp)            (c >=> fp)
    Done x          >>= fp = fp x
    PipeM mp        >>= fp = PipeM      ((>>= fp) `liftM` mp)
    Leftover p i    >>= fp = Leftover   (p >>= fp)            i

instance MonadTrans (Pipe l i o u) where
    lift mr = PipeM (Done `liftM` mr)

instance MonadIO m => MonadIO (Pipe l i o u m) where
    liftIO = lift . liftIO

instance MonadResource m => MonadResource (Pipe l i o u m) where
    liftResourceT = lift . liftResourceT

--- This is similar to @await@, but will return the upstream result value as
--- @Left@ if available.
awaitE :: Pipe l i o u m (Either u i)
awaitE = NeedInput (Done . Right) (Done . Left)

--- Same as 'pipe', but automatically applies 'injectLeftovers' to the right @Pipe@.
pipeL :: Monad m => Pipe l a b r0 m r1 -> Pipe b b c r1 m r2 -> Pipe l a c r0 m r2
pipeL =
    goRight
  where
    goRight left right =
        case right of
            HaveOutput p o    -> HaveOutput (recurse p) o
            NeedInput rp rc   -> goLeft rp rc left
            Done r2           -> Done r2
            PipeM mp          -> PipeM (liftM recurse mp)
            Leftover right' i -> goRight (HaveOutput left i) right'
      where
        recurse = goRight left

    goLeft rp rc left =
        case left of
            HaveOutput left' o -> goRight left' (rp o)
            NeedInput left' lc -> NeedInput (recurse . left') (recurse . lc)
            Done r1            -> goRight (Done r1) (rc r1)
            PipeM mp           -> PipeM (liftM recurse mp)
            Leftover left' i   -> Leftover (recurse left') i
      where
        recurse = goLeft rp rc

--- Run a pipeline until processing completes.
runPipe :: Monad m => Pipe Void () Void () m r -> m r
runPipe (HaveOutput _ o) = absurd o
runPipe (NeedInput _ c) = runPipe (c ())
runPipe (Done r) = return r
runPipe (PipeM mp) = mp >>= runPipe
runPipe (Leftover _ i) = absurd i

--- Transforms a @Pipe@ that provides leftovers to one which does not,
--- allowing it to be composed.
---
--- This function will provide any leftover values within this @Pipe@ to any
--- calls to @await@. If there are more leftover values than are demanded, the
--- remainder are discarded.
injectLeftovers :: Monad m => Pipe i i o u m r -> Pipe l i o u m r
injectLeftovers =
    go []
  where
    go ls (HaveOutput p o) = HaveOutput (go ls p) o
    go (l:ls) (NeedInput p _) = go ls $ p l
    go [] (NeedInput p c) = NeedInput (go [] . p) (go [] . c)
    go _ (Done r) = Done r
    go ls (PipeM mp) = PipeM (liftM (go ls) mp)
    go ls (Leftover p l) = go (l:ls) p

--- Returns a tuple of the upstream and downstream results. Note that this
--- will force consumption of the entire input stream.
withUpstream :: Monad m => Pipe l i o u m r -> Pipe l i o u m (u, r)
withUpstream down =
    down >>= go
  where
    go r =
        loop
      where
        loop = awaitE >>= either (\u -> return (u, r)) (\_ -> loop)

--- Generalize the upstream return value for a @Pipe@ from unit to any type.
generalizeUpstream :: Monad m => Pipe l i o () m r -> Pipe l i o u m r
generalizeUpstream =
    go
  where
    go (HaveOutput p o) = HaveOutput (go p) o
    go (NeedInput x y)  = NeedInput (go . x) (\_ -> go (y ()))
    go (Done r)         = Done r
    go (PipeM mp)       = PipeM (liftM go mp)
    go (Leftover p l)   = Leftover (go p) l
