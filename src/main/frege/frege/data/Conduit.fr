--- If this is your first time with conduit, you should probably start with
--- the tutorial:
--- <https://github.com/snoyberg/conduit#readme>.
module frege.data.Conduit where

import frege.control.monad.trans.MonadIO (MonadIO)
import frege.control.monad.trans.MonadTrans (MonadTrans)
import frege.data.Monoid (Monoid)
import frege.data.Void (Void)
import frege.data.conduit.internal.Pipe
  ( Pipe
  , injectLeftovers
  , runPipe
  )
import frege.data.wrapper.Identity (Identity)

--- Core datatype of the conduit package. This type represents a general
--- component which can consume a stream of input values @i@, produce a stream
--- of output values @o@, perform actions in the @m@ monad, and produce a final
--- result @r@. The type synonyms provided here are simply wrappers around this
--- type.
data ConduitT i o m r = ConduitT
    { run :: forall b.
             (r -> Pipe i i o () m b) -> Pipe i i o () m b
    }

unConduitT :: ConduitT i o m r -> (r -> Pipe i i o () m b) -> Pipe i i o () m b
unConduitT = ConduitT.run

instance Monad (ConduitT i o m) where
    pure x = ConduitT ($ x)
    ConduitT f >>= g = ConduitT (\h -> f $ \a -> unConduitT (g a) h)

instance MonadIO m => MonadIO (ConduitT i o m) where
    liftIO = lift . liftIO

instance MonadTrans (ConduitT i o) where
    lift mr = ConduitT (\rest -> PipeM (liftM rest mr))

-- TODO why this doesn't require "Monad m =>" ??
instance Monoid (ConduitT i o m ()) where
    mempty = pure ()
    mappend = (>>)

--- Run a pipeline until processing completes.
runConduit :: Monad m => ConduitT () Void m r -> m r
runConduit (ConduitT p) = runPipe $ injectLeftovers $ p Done

--- Run a pure pipeline until processing completes, i.e. a pipeline with
--- @Identity@ as the base monad. This is equivalent to
--- @Identity.run . runConduit@.
runConduitPure :: ConduitT () Void Identity r -> r
runConduitPure = Identity.run . runConduit

--- Named function synonym for '.|'.
---
--- Equivalent to '.|'.
fuse :: Monad m => ConduitT a b m () -> ConduitT b c m r -> ConduitT a c m r
fuse = (.|)

--- Combine two @Conduit@s together into a new @Conduit@ (aka 'fuse').
---
--- Output from the upstream (left) conduit will be fed into the
--- downstream (right) conduit. Processing will terminate when
--- downstream (right) returns.
--- Leftover data returned from the right @Conduit@ will be discarded.
---
--- Equivalent to 'fuse' and '=$=', however the latter is deprecated and will
--- be removed in a future version.
---
--- Note that, while this operator looks like categorical composition
--- (from "Control.Category"), there are a few reasons it's different:
---
--- * The position of the type parameters to 'ConduitT' do not
---   match. We would need to change @ConduitT i o m r@ to @ConduitT r
---   m i o@, which would preclude a 'Monad' or 'MonadTrans' instance.
---
--- * The result value from upstream and downstream are allowed to
---   differ between upstream and downstream. In other words, we would
---   need the type signature here to look like @ConduitT a b m r ->
---   ConduitT b c m r -> ConduitT a c m r@.
---
--- * Due to leftovers, we do not have a left identity in Conduit. This
---   can be achieved with the underlying @Pipe@ datatype, but this is
---   not generally recommended. See <https://stackoverflow.com/a/15263700>.
(.|) :: Monad m => ConduitT a b m ()
                -> ConduitT b c m r
                -> ConduitT a c m r
ConduitT left0 .| ConduitT right0 = ConduitT (\rest ->
    let goRight left right =
            case right of
                HaveOutput p o    -> HaveOutput (recurse p) o
                NeedInput rp rc   -> goLeft rp rc left
                Done r2           -> rest r2
                PipeM mp          -> PipeM (liftM recurse mp)
                Leftover right' i -> goRight (HaveOutput left i) right'
          where
            recurse = goRight left

        goLeft rp rc left =
            case left of
                HaveOutput left' o        -> goRight left' (rp o)
                NeedInput left' lc        -> NeedInput (recurse . left') (recurse . lc)
                Done r1                   -> goRight (Done r1) (rc r1)
                PipeM mp                  -> PipeM (liftM recurse mp)
                Leftover left' i          -> Leftover (recurse left') i
          where
            recurse = goLeft rp rc
     in goRight (left0 Done) (right0 Done)
    )

--- Wait for a single input value from upstream. If no data is available,
--- returns @Nothing@. Once @await@ returns @Nothing@, subsequent calls will
--- also return @Nothing@.
await :: Monad m => ConduitT i o m (Maybe i)
await = ConduitT (\f -> NeedInput (f . Just) (const $ f Nothing))

--- Provide a single piece of leftover input to be consumed by the next
--- component in the current monadic binding.
---
--- /Note/: it is highly encouraged to only return leftover values from input
--- already consumed from upstream.
leftover :: i -> ConduitT i o m ()
leftover i = ConduitT (\rest -> Leftover (rest ()) i)

--- Send a value downstream to the next component to consume. If the
--- downstream component terminates, this call will never return control.
yield :: Monad m => o -> ConduitT i o m ()
yield o = ConduitT (\rest -> HaveOutput (rest ()) o)

--- Wait for input forever, calling the given inner component for each piece of
--- new input.
---
--- This function is provided as a convenience for the common pattern of
--- @await@ing input, checking if it's @Just@ and then looping.
awaitForever :: Monad m => (i -> ConduitT i o m r) -> ConduitT i o m ()
awaitForever f = ConduitT (\rest ->
  let go = NeedInput (\i -> unConduitT (f i) (const go)) rest
   in go)
